akka {
  event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
  loglevel = INFO

  extensions = ["com.romix.akka.serialization.kryo.KryoSerializationExtension$"]

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
//    // We only recommend using the config option turned on when you're running tests.
//    // It is completely pointless to have it turned on in other scenarios.
//    serialize-messages = off

    serializers {
      java = "akka.serialization.JavaSerializer"
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      "org.webrtc.SessionDescription" = kryo
      "org.webrtc.SessionDescription$Type" = kryo
      "org.webrtc.IceCandidate" = kryo

      "server.Publisher$Offer" = kryo
      "server.Publisher$Candidate" = kryo
      "server.Publisher$Subscribe" = kryo

      "livehq.package$Internal$Offer" = kryo
      "livehq.package$Internal$Candidate" = kryo
      "livehq.package$Internal$Answer" = kryo

      "server.Subscriber$Subscribe" = kryo
    }

    kryo  {
      # Possibles values for type are: graph or nograph
      # graph supports serialization of object graphs with shared nodes
      # and cyclic references, but this comes at the expense of a small overhead
      # nograph does not support object grpahs with shared nodes, but is usually faster
      type = "graph"


      # Possible values for idstrategy are:
      # default, explicit, incremental
      #
      # default - slowest and produces bigger serialized representation. Contains fully-
      # qualified class names (FQCNs) for each class. Note that selecting this strategy
      # does not work in version 0.3.2, but is available on master and from 0.3.3 onward.
      #
      # explicit - fast and produces compact serialized representation. Requires that all
      # classes that will be serialized are pre-registered using the "mappings" and "classes"
      # sections. To guarantee that both sender and receiver use the same numeric ids for the same
      # classes it is advised to provide exactly the same entries in the "mappings" section
      #
      # incremental - fast and produces compact serialized representation. Support optional
      # pre-registering of classes using the "mappings" and "classes" sections. If class is
      # not pre-registered, it will be registered dynamically by picking a next available id
      # To guarantee that both sender and receiver use the same numeric ids for the same
      # classes it is advised to pre-register them using at least the "classes" section

      idstrategy = "explicit"

      # Define a default size for serializer pool
      # Try to define the size to be at least as big as the max possible number
      # of threads that may be used for serialization, i.e. max number
      # of threads allowed for the scheduler
      serializer-pool-size = 16

      # Define a default size for byte buffers used during serialization
      buffer-size = 4096

      # The serialization byte buffers are doubled as needed until they exceed max-buffer-size and an exception is thrown. Can be -1 for no maximum.
      max-buffer-size = -1

      # If set, akka uses manifests to put a class name
      # of the top-level object into each message
      use-manifests = false

      # Enable transparent compression of serialized messages
      # accepted values are: off | lz4 | deflate
      compression = off

      # Log implicitly registered classes. Useful, if you want to know all classes
      # which are serialized. You can then use this information in the mappings and/or
      # classes sections
      implicit-registration-logging = true

      # If enabled, Kryo logs a lot of information about serialization process.
      # Useful for debugging and lowl-level tweaking
      # kryo-trace = true

      # If proviced, Kryo uses the class specified by a fully qualified class name
      # to perform a custom initialization of Kryo instances in addition to what
      # is done automatically based on the config file.
      #  kryo-custom-serializer-init = "CustomKryoSerializerInitFQCN"

      # Define mappings from a fully qualified class name to a numeric id.
      # Smaller ids lead to smaller sizes of serialized representations.
      #
      # This section is mandatory for idstartegy=explciit
      # This section is optional  for idstartegy=incremental
      # This section is ignored   for idstartegy=default
      #
      # The smallest possible id should start at 20 (or even higher), because
      # ids below it are used by Kryo internally e.g. for built-in Java and
      # Scala types
      mappings {
        "org.webrtc.SessionDescription" = 2000
        "org.webrtc.SessionDescription$Type" = 2001
        "org.webrtc.IceCandidate" = 2002

        "server.Publisher$Offer" = 3000
        "server.Publisher$Candidate" = 3001
        "server.Publisher$Subscribe" = 3002

        "livehq.package$Internal$Offer" = 3100
        "livehq.package$Internal$Candidate" = 3101
        "livehq.package$Internal$Answer" = 3102

        "server.Subscriber$Subscribe" = 4000
      }
    }
  }
}

configurableApp._comment="environment:[production|staging|test|development]"
#configurableApp.environment=production
configurableApp.environment=development
