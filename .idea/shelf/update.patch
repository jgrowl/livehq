Index: media/src/main/scala/server/Publisher.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- media/src/main/scala/server/Publisher.scala	(date 1417496668000)
+++ media/src/main/scala/server/Publisher.scala	(revision )
@@ -29,39 +29,48 @@
 class Publisher(webRtcHelper: WebRtcHelper, callback: Callback) extends Actor
 with ActorLogging
 with PeerConnection.Observer {
-  log.info(s"Creating PeerConnection(${_identifier}.")
-  private val _incomingPeerConnection = new StandardPcDetails(webRtcHelper.createPeerConnection(this))
+  val pcId = Log.pcId(_identifier)
+  log.info(s"$pcId created.")
+  private var _incomingPeerConnection = new StandardPcDetails(webRtcHelper.createPeerConnection(this))
 
-  private val _registryPeerConnections = mutable.Map.empty[String, PathedPcDetails]
+  private var _registryPeerConnections = mutable.Map.empty[String, PathedPcDetails]
 
+  def _init(): Unit = {
+    log.info(s"$pcId (re)initializing...")
+    _incomingPeerConnection = new StandardPcDetails(webRtcHelper.createPeerConnection(this))
+    _registryPeerConnections = mutable.Map.empty[String, PathedPcDetails]
+  }
+
+  _init()
+
   override def receive: Actor.Receive = {
     case Incoming.Offer(identifier, sessionDescription) =>
-      log.info(s"Incoming.Offer received.")
+      log.info(s"$pcId Incoming.Offer received.")
       val answer = webRtcHelper.createAnswer(_incomingPeerConnection.peerConnection, sessionDescription)
       if (answer.isDefined) {
         callback.sendAnswer(identifier, answer.get)
       } else {
-        log.error("Failed to create answer! No answer will be sent back!")
+        log.error(s"$pcId Failed to create answer! No answer will be sent back!")
       }
     case Incoming.Candidate(identifier, iceCandidate) =>
-      log.info(s"Incoming.Candidate received.")
+      log.info(s"$pcId Incoming.Candidate received.")
       _incomingPeerConnection.peerConnection.addIceCandidate(iceCandidate)
 
     case Incoming.Subscribe(identifier: String, targetIdentifier: String) =>
-      log.info(s"Incoming.Subscribe received ($identifier -> $targetIdentifier)")
+      log.info(s"$pcId Incoming.Subscribe received ($identifier -> $targetIdentifier)")
       // This tells the registry to return the MediaStream
       context.system.actorSelection("user/registry") ! Incoming.Subscribe(identifier, targetIdentifier)
 
     // Internal
     case Internal.Candidate(identifier, uuid, candidate) =>
-      log.info(s"Internal.Candidate received ($uuid).")
+      log.info(s"$pcId Internal.Candidate received ($uuid).")
       _registryPeerConnections.get(uuid).get.peerConnection.addIceCandidate(candidate)
     case Internal.Answer(identifier, uuid, answer) =>
-      log.info(s"Internal.Answer received ($uuid).")
+      log.info(s"$pcId Internal.Answer received ($uuid).")
       webRtcHelper.setRemoteDescription(_registryPeerConnections.get(uuid).get.peerConnection, answer)
 
     case Internal.CreateRegistryPeerConnections(identifier) =>
-      log.info(s"Internal.CreateRegistryPeerConnections received.")
+      log.info(s"$pcId Internal.CreateRegistryPeerConnections received.")
       //      // TODO: I figure if we get a CONNECTED, then we should assume we need to always reconnect to all registry members
       //      // from scratch. Seems like we should just clear them out before doing anything. I need to evaluate whether this
       //      // is a good idea.
@@ -70,7 +79,7 @@
       _initializeRegistryPeerConnections(_identifier)
 
     case Internal.AttachMediaStreams(identifier, uuid) =>
-      log.info(s"Internal.AttachMediaStreams received.")
+      log.info(s"$pcId Internal.AttachMediaStreams received.")
       val registryPcDetails = _registryPeerConnections.get(uuid).get
 
       for (mediaStream <- _incomingPeerConnection.getMediaStreams) {
@@ -82,11 +91,11 @@
       if (offer.isDefined) {
         context.system.actorSelection(registryPcDetails.path) ! Internal.Offer(identifier, uuid, offer.get)
       } else {
-        log.error(s"($uuid) Failed to create an offer! No offer will be sent!")
+        log.error(s"$pcId Failed to create an offer for [$uuid]! No offer will be sent!")
       }
 
     case Internal.AddMediaStream(identifier, mediaStreamId, mediaStream) =>
-      log.info(s"Internal.AddMediaStream : Adding MediaStream($mediaStreamId)...")
+      log.info(s"$pcId Internal.AddMediaStream : Adding MediaStream($mediaStreamId)...")
       // TODO: Figure out if we can duplicate the stream just once per publisher and registry nodes
       // We need to duplicate the media stream again.
       webRtcHelper.createDuplicateMediaStream(mediaStream, mediaStreamId + "-1")
@@ -102,32 +111,32 @@
       }
   }
 
-  override def onSignalingChange(signalState: SignalingState): Unit = {
-    log.info(s"onSignalingChange : [${signalState.name()}].")
-    callback.onSignalingChange(_identifier, signalState)
-  }
-
   override def onError(): Unit = {
-    log.error(s"onError.")
+    log.error(s"$pcId.onError.")
   }
 
   override def onIceCandidate(iceCandidate: IceCandidate): Unit = {
-    log.info(s"onIceCandidate.")
+    log.info(s"$pcId.onIceCandidate.")
     callback.sendIceCandidate(_identifier, iceCandidate)
   }
 
   override def onRemoveStream(mediaStream: MediaStream): Unit = {
-    log.info(s"onRemoveStream : [${mediaStream.label()}.")
+    log.info(s"$pcId.onRemoveStream : [${mediaStream.label()}.")
     callback.onRemoveStream(_identifier, mediaStream)
   }
 
   override def onIceGatheringChange(gatheringState: IceGatheringState): Unit = {
-    log.info(s"onIceGatheringChange : [${gatheringState.name()}].")
+    log.info(s"$pcId.onIceGatheringChange : [${gatheringState.name()}].")
     callback.onIceGatheringChange(_identifier, gatheringState)
   }
 
+  override def onSignalingChange(signalState: SignalingState): Unit = {
+    log.info(s"$pcId.onSignalingChange : [${signalState.name()}].")
+    callback.onSignalingChange(_identifier, signalState)
+  }
+
   override def onIceConnectionChange(iceConnectionState: IceConnectionState): Unit = {
-    log.info(s"onIceConnectionChange : [${iceConnectionState.name()}].")
+    log.info(s"$pcId.onIceConnectionChange : [${iceConnectionState.name()}].")
     callback.onIceConnectionChange(_identifier, iceConnectionState)
     if (iceConnectionState == IceConnectionState.CONNECTED) {
       // We have the actor send a message to itself because it will fail here if we try to have a PeerConnection
@@ -139,7 +148,7 @@
       _registryPeerConnections.foreach {
         case (uuid, pcDetail) => {
           log.info(s"Closing $uuid...")
-          log.info(s"(${uuid}) Closing ${pcDetail.getMediaStreams.size} MediaStreams")
+          log.info(s"($uuid) Closing ${pcDetail.getMediaStreams.size} MediaStreams")
           pcDetail.getMediaStreams.foreach {
             case (label, mediaStream) => {
               pcDetail.peerConnection.removeStream(mediaStream)
@@ -151,19 +160,19 @@
           pcDetail.peerConnection.close()
         }
       }
-      _registryPeerConnections.clear()
+      _init()
     }
   }
 
   override def onAddStream(mediaStream: MediaStream): Unit = {
-    log.info(s"onAddStream : [${mediaStream.label()}]")
+    log.info(s"$pcId.onAddStream : [${mediaStream.label()}]")
     callback.onAddStream(_identifier, mediaStream)
 
     _incomingPeerConnection.addStream(mediaStream)
 
     val duplicatedMediaStream = webRtcHelper.createDuplicateMediaStream(mediaStream, _identifier)
 
-    log.info(s"Adding MediaStream(${mediaStream.label()}) to [${_registryPeerConnections.size}] registry PeerConnection(s)")
+    log.info(s"$pcId Adding MediaStream(${mediaStream.label()}) to [${_registryPeerConnections.size}] registry PeerConnection(s)")
     _registryPeerConnections.foreach {
       case (uuid, pcDetail) => {
         if (pcDetail.peerConnection.addStream(duplicatedMediaStream, webRtcHelper.createConstraints)) {
@@ -198,7 +207,6 @@
     cluster.state.members.filter(_.status == MemberStatus.Up)
   }
 
-  // TODO: Not sure if this will always work
   def _identifier = self.path.name
 
   def newUuid = java.util.UUID.randomUUID.toString
@@ -206,54 +214,55 @@
   def _initializeRegistryPeerConnections(identifier: String): Unit = {
     for (path: String <- registryPaths()) {
       val uuid = newUuid
-      log.info(s"Creating registry PeerConnection($uuid) for [$path]")
+      val logId = Log.registryPubPcId(_identifier, uuid)
+      log.info(s"$logId for [$path]")
       callback.onRegistryPubInitialize(identifier, uuid, path)
 
       val registry = context.system.actorSelection(path)
 
       val registryObserver = new PeerConnection.Observer() {
         override def onSignalingChange(signalState: SignalingState): Unit = {
-          log.info(s"RegistryPeerConnection($uuid).onSignalingChange : [${signalState.name()}].")
+          log.info(s"$logId.onSignalingChange : [${signalState.name()}].")
           callback.onRegistryPubSignalingChange(identifier, uuid, signalState)
         }
 
         override def onError(): Unit = {
-          log.error(s"RegistryPeerConnection($uuid).onError!")
+          log.error(s"$logId.onError!")
         }
 
         override def onIceCandidate(candidate: IceCandidate): Unit = {
-          log.info(s"RegistryPeerConnection($uuid).onIceCandidate [${candidate.toString}]")
+          log.info(s"$logId.onIceCandidate [${candidate.toString}]")
           registry ! Internal.Candidate(identifier, uuid, candidate)
         }
 
-        override def onRemoveStream(mediaStream: MediaStream): Unit = {
-          log.info(s"RegistryPeerConnection($uuid).onRemoveStream : [${mediaStream.label()}.")
-          callback.onRegistryPubRemoveStream(identifier, uuid, mediaStream)
-        }
 
         override def onIceGatheringChange(gatheringState: IceGatheringState): Unit = {
-          log.info(s"RegistryPeerConnection($uuid).onIceGatheringChange : [${gatheringState.name()}].")
+          log.info(s"$logId.onIceGatheringChange : [${gatheringState.name()}].")
           callback.onRegistryPubIceGatheringChange(identifier, uuid, gatheringState)
         }
 
         override def onIceConnectionChange(iceConnectionState: IceConnectionState): Unit = {
-          log.info(s"RegistryPeerConnection($uuid).onIceConnectionChange : [${iceConnectionState.name()}].")
+          log.info(s"$logId.onIceConnectionChange : [${iceConnectionState.name()}].")
           callback.onRegistryPubIceConnectionChange(identifier, uuid, iceConnectionState)
           if (iceConnectionState == IceConnectionState.CONNECTED) {
             // Now that we're connected to the registry PeerConnection, we can add any MediaStreams
-            log.info(s"RegistryPeerConnection($uuid) Attaching MediaStreams.")
+            log.info(s"$logId Attaching MediaStreams.")
 
             self ! Internal.AttachMediaStreams(identifier, uuid)
           }
         }
 
+        // Registry PeerConnections(pub) are only outgoing! It would never make sense to have a Registry PeerConnection
+        // ever send anything back to the Publisher since the registry only acts as a means of replication!
         override def onAddStream(mediaStream: MediaStream): Unit = {
-          log.info(s"RegistryPeerConnection($uuid).onAddStream : [${mediaStream.label()}]")
-          // TODO: This should actually happen!?
-          log.error("onAddStream called but the registry should never do this!")
-          callback.onRegistryPubAddStream(identifier, uuid, mediaStream)
+          log.error(s"$logId.onAddStream : [${mediaStream.label()}] called but the registry should never do this!")
         }
 
+        // onAddStream should never get called, thus onRemove will never get called either!
+        override def onRemoveStream(mediaStream: MediaStream): Unit = {
+          log.error(s"$logId.onRemoveStream : [${mediaStream.label()}.")
+        }
+
         override def onDataChannel(p1: DataChannel): Unit = ???
       }
 
@@ -261,17 +270,17 @@
 
       // Attach all MediaStream to registry PeerConnection
       val mediaStreams = _incomingPeerConnection.getMediaStreams
-      log.info(s"Attaching [${mediaStreams.size}] MediaStreams...")
+      log.info(s"$logId Attaching [${mediaStreams.size}] MediaStreams...")
       mediaStreams.foreach {
         case (mediaStreamId, mediaStream) => {
-          log.info(s"Adding MediaStream(${mediaStream.label()}) to registry PeerConnection($uuid)")
+          log.info(s"$logId Adding MediaStream(${mediaStream.label()})")
           pc.addStream(mediaStream, webRtcHelper.createConstraints)
           val offer = webRtcHelper.createOffer(pc)
           if (offer.isDefined) {
-            log.info(s"Added MediaStream(${mediaStream.label()}. Sending updated offer.")
+            log.info(s"$logId Added MediaStream(${mediaStream.label()}, sending updated offer.")
             callback.sendOffer(identifier, offer.get)
           } else {
-            log.error(s"Added MediaStream(${mediaStream.label()}. but failed to create offer! No offer will be sent!")
+            log.error(s"$logId Added MediaStream(${mediaStream.label()}, but failed to create offer! No offer will be sent!")
           }
         }
       }
@@ -283,7 +292,7 @@
       if (offer.isDefined) {
         context.system.actorSelection(path) ! Internal.Offer(identifier, uuid, offer.get)
       } else {
-        log.error(s"($uuid) Failed to create an offer! No offer will be sent!")
+        log.error(s"$logId Failed to create an offer! No offer will be sent!")
       }
     }
   }
